{"version":3,"sources":["IncomeView.js","HouseView.js","ResultsView.js","App.js","serviceWorker.js","index.js"],"names":["toggleButtonTheme","createMuiTheme","palette","primary","main","IncomeView","props","handleResidentChange","event","newResidentCount","setState","prevState","prevInitialField","initialIncomeField","amount","months","Array","from","updateData","state","prevExtraFields","extraIncomeRows","residentCount","addIncomeRow","resident","prevIncomeRows","removeIncomeRow","index","rows","splice","setIncomeAmount","value","setIncomeMonths","renderIncomeRow","rowData","label","isFirstRow","key","TextField","type","style","width","maxWidth","onChange","target","variant","InputProps","endAdornment","InputAdornment","position","Tooltip","title","IconButton","marginTop","color","size","onClick","aria-label","componentDidMount","children","municipality","this","Divider","margin","map","row","totalEarnings","className","ThemeProvider","theme","ToggleButtonGroup","exclusive","ToggleButton","error","parseInt","startAdornment","Math","round","React","Component","HouseView","toggleIncludes","val","handleMunicipalityChange","rent","electricityValue","includesWater","includesElectricity","includesHeating","area","parseFloat","Select","MenuItem","marginBottom","display","justifyContent","FormGroup","FormControlLabel","control","Checkbox","checked","ResultsView","message","data","assistance","isNaN","incomeAllowancePerMonth","waterValuePerPerson","App","useState","setData","earnings","setEarnings","calcAssistance","residents","maxResidentialCost","municipalityGroup","extraResidents","cost","min","calcMaxResidentialCost","residentialCosts","EarningsAfterEarnedIncomeAllowance","max","basicDeductible","cleanData","receivedData","newData","validate","NaN","total","calcTotalEarnings","AppBar","Toolbar","Typography","href","Button","overflow","height","Grid","container","spacing","item","xs","sm","Paper","elevation","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.d9a33e72.chunk.js","sourcesContent":["import React from 'react';\nimport ToggleButton from '@material-ui/lab/ToggleButton';\nimport TextField from '@material-ui/core/TextField';\nimport ToggleButtonGroup from '@material-ui/lab/ToggleButtonGroup';\nimport InputAdornment from '@material-ui/core/InputAdornment';\nimport Divider from '@material-ui/core/Divider';\nimport IconButton from '@material-ui/core/IconButton';\nimport Tooltip from '@material-ui/core/Tooltip';\n\nimport PersonIcon from '@material-ui/icons/Person';\nimport HelpIcon from '@material-ui/icons/Help';\nimport PeopleIcon from '@material-ui/icons/People';\nimport ChildFriendly from '@material-ui/icons/ChildFriendly';\nimport EuroSymbol from '@material-ui/icons/EuroSymbol';\nimport AddIcon from '@material-ui/icons/Add';\nimport RemoveIcon from '@material-ui/icons/Remove';\n\nimport { createMuiTheme } from '@material-ui/core/styles';\nimport { ThemeProvider } from '@material-ui/styles';\n\nconst toggleButtonTheme = createMuiTheme({\n    palette: {\n      primary: {main: '#FFF'}\n    }\n  });\nclass IncomeView extends React.Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n            extraIncomeRows: [[], []],\n            residentCount: 1,\n            children: 0,\n            municipality: 1,\n            initialIncomeField: [{ amount: 0, months: 12 },\n            { amount: 0, months: 12 }]\n        };\n    };\n\n    handleResidentChange = (event, newResidentCount) => {\n        if (!newResidentCount) {\n            return\n        }\n        if (newResidentCount === 1) {\n            this.setState(prevState => {\n                const prevInitialField = [...prevState.initialIncomeField]\n                prevInitialField[1] = { amount: 0, months: 12 }\n                return { initialIncomeField: Array.from(prevInitialField) }\n            }, () => this.props.updateData(this.state))\n\n            this.setState(prevState => {\n                const prevExtraFields = [...prevState.extraIncomeRows]\n                prevExtraFields[1] = []\n                return { extraIncomeRows: Array.from(prevExtraFields) }\n            }, () => this.props.updateData(this.state))\n        }\n        this.setState({ residentCount: newResidentCount }, () => this.props.updateData(this.state))\n    };\n\n\n    addIncomeRow = (resident) => {\n        this.setState(prevState => {\n            let prevIncomeRows = [...prevState.extraIncomeRows]\n            prevIncomeRows[resident] = [...prevIncomeRows[resident], { amount: 0, months: 0 }]\n            return { extraIncomeRows: prevIncomeRows }\n        }, () => this.props.updateData(this.state))\n    }\n\n    removeIncomeRow = (index, resident) => {\n        var rows = [...this.state.extraIncomeRows];\n        rows[resident].splice(index, 1);\n        this.setState({ extraIncomeRows: rows }, () => this.props.updateData(this.state));\n    }\n    setIncomeAmount = (index, resident, value) => {\n        if (index === -1) {\n\n            this.setState(prevState => {\n                const prevInitialField = [...prevState.initialIncomeField]\n                prevInitialField[resident].amount = value\n                return { initialIncomeField: Array.from(prevInitialField) }\n            }, () => this.props.updateData(this.state))\n        }\n        else {\n            this.setState(prevState => {\n                const prevExtraFields = [...prevState.extraIncomeRows]\n                prevExtraFields[resident][index].amount = value\n                return { extraIncomeRows: Array.from(prevExtraFields) }\n            }, () => this.props.updateData(this.state))\n        }\n\n    }\n    setIncomeMonths = (index, resident, value) => {\n        if (index === -1) {\n\n            this.setState(prevState => {\n                const prevInitialField = [...prevState.initialIncomeField]\n                prevInitialField[resident].months = value\n                return { initialIncomeField: Array.from(prevInitialField) }\n            }, () => this.props.updateData(this.state))\n        }\n        else {\n            this.setState(prevState => {\n                const prevExtraFields = [...prevState.extraIncomeRows]\n                prevExtraFields[resident][index].months = value\n                return { extraIncomeRows: Array.from(prevExtraFields) }\n            }, () => this.props.updateData(this.state))\n        }\n    }\n    renderIncomeRow = (rowData, index, resident, label) => {\n        const isFirstRow = index === -1;\n        return (\n            <div key={resident + \"-\" + index}>\n                <TextField\n                    type=\"number\"\n                    style={{ width: 200, maxWidth: \"50%\" }}\n                    label={label}\n                    value={rowData.amount}\n                    onChange={(event) => this.setIncomeAmount(index, resident, event.target.value)}\n                    variant=\"outlined\"\n                    InputProps={{\n                        endAdornment: (\n                            <InputAdornment position=\"end\">\n                                <EuroSymbol />\n                            </InputAdornment>\n                        ),\n                    }}\n                />\n                <TextField\n                    type=\"number\"\n                    style={{ width: 100 }}\n                    onChange={(event) => this.setIncomeMonths(index, resident, event.target.value)}\n                    label={isFirstRow ? \"Kuukautta\" : null}\n                    value={rowData.months}\n\n                    variant=\"outlined\"\n                />\n                <Tooltip title={isFirstRow ? \"Lisää rivi\" : \"Poista rivi\"}>\n                    <IconButton\n                        style={{ marginTop: 4 }}\n                        color={isFirstRow ? \"primary\" : \"secondary\"}\n                        label=\"Testi\"\n                        size=\"medium\"\n                        onClick={isFirstRow ? () => this.addIncomeRow(resident) : () => this.removeIncomeRow(index, resident)}\n                        aria-label=\"Add row\">\n                        {isFirstRow ? <AddIcon /> : <RemoveIcon />}\n                    </IconButton>\n                </Tooltip>\n            </div>\n        )\n\n    }\n    componentDidMount = () => {\n        this.props.updateData(this.state)\n    }\n    render() {\n\n        let extraIncomeRows;\n        if (this.state.residentCount !== 1) {\n            extraIncomeRows = (\n                <div>\n                    <Divider style={{ margin: \"1rem\" }} />\n                    {this.renderIncomeRow(this.state.initialIncomeField[1], -1, 1, \"Toisen asukkaan tulot\")}\n                    {this.state.extraIncomeRows[1].map((row, index) => this.renderIncomeRow(row, index, 1))}\n                </div>\n            );\n        }\n        const { totalEarnings } = this.props\n        return (\n            <div className=\"panel\">\n                <div>\n                    <h3> Asukkaita</h3>\n                    <ThemeProvider theme={toggleButtonTheme}>\n                    <ToggleButtonGroup size=\"large\" value={this.state.residentCount} exclusive onChange={this.handleResidentChange}>\n\n                        <ToggleButton key={1} value={1}>\n                            <Tooltip title=\"1 ihminen\">\n                                <PersonIcon />\n                            </Tooltip>,\n                            </ToggleButton>\n                        <ToggleButton key={2} value={2}>\n                            <Tooltip title=\"2 ihmistä\">\n                                <PeopleIcon />\n                            </Tooltip>\n                        </ToggleButton>\n                    </ToggleButtonGroup>\n                    </ThemeProvider>\n                    <TextField\n                        type=\"number\"\n                        error={this.state.children < 0}\n                        style={{ width: 100 }}\n                        label=\"Lapsia\"\n                        value={this.state.children}\n                        onChange={(event) => this.setState({ children: parseInt(event.target.value, 10) }, () => this.props.updateData(this.state))}\n                        variant=\"outlined\"\n                        InputProps={{\n                            startAdornment: (\n                                <InputAdornment position=\"start\">\n                                    <ChildFriendly />\n                                </InputAdornment>\n                            ),\n                        }}\n                    />\n                </div>\n                <div>\n                    <h3>Tulot\n                        <Tooltip title=\"Ruokakunnan tuloina huomioidaan ansiotulot, pääomatulot ja useat sosiaalietuudet, mm opintotuki. \">\n                            <IconButton aria-label=\"help\" color=\"primary\">\n                                <HelpIcon />\n                            </IconButton>\n                        </Tooltip>\n                    </h3>\n                    {this.renderIncomeRow(this.state.initialIncomeField[0], -1, 0, \"Omat tulot\")}\n                    {this.state.extraIncomeRows[0].map((row, index) => this.renderIncomeRow(row, index, 0))}\n                    {extraIncomeRows}\n\n                    <p> Tuloja yhteensä vuodessa {totalEarnings} € ({Math.round(totalEarnings / 12)} €/kk)</p>\n                </div >\n            </div >\n        )\n\n    }\n}\n\nexport default IncomeView;","import React from 'react';\nimport TextField from '@material-ui/core/TextField';\nimport InputAdornment from '@material-ui/core/InputAdornment';\nimport EuroSymbol from '@material-ui/icons/EuroSymbol';\nimport HouseSymbol from '@material-ui/icons/House';\n\nimport MenuItem from '@material-ui/core/MenuItem';\nimport Select from '@material-ui/core/Select';\nimport FormGroup from '@material-ui/core/FormGroup';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport Checkbox from '@material-ui/core/Checkbox';\n\n\nclass HouseView extends React.Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n            rent: 0,\n            electricityValue: 0.83,\n            includesWater: true,\n            includesElectricity: false,\n            includesHeating: true,\n            area: 40,\n            municipality: 0\n        };\n    };\n\n    toggleIncludes = (val) => {\n        this.setState(prevState => {\n            return { [val]: !prevState[val] }\n        }, () => this.props.updateData(this.state))\n    }\n    handleMunicipalityChange = event => {\n        this.setState({ municipality: event.target.value }, () => this.props.updateData(this.state));\n    };\n\n\n    render() {\n        let area;\n        if (this.state.includesElectricity) {\n            area = (\n                <div>\n                    <TextField\n                        type=\"number\"\n                        style={{ width: 200 }}\n                        label={<span>Asuinpinta-ala (m<sup>2</sup>)</span>}\n                        value={this.state.area}\n                        onChange={(event) => this.setState({ area: parseFloat(event.target.value) }, () => this.props.updateData(this.state))}\n                        variant=\"outlined\"\n                        InputProps={{\n                            endAdornment: (\n                                <InputAdornment position=\"end\">\n                                    <HouseSymbol />\n                                </InputAdornment>\n                            ),\n                        }}\n                    />\n                    <TextField\n                        type=\"number\"\n                        style={{ width: 200 }}\n                        label={<span>Sähkön raha-arvo /m<sup>2</sup>/kk</span>}\n                        value={this.state.electricityValue}\n                        onChange={(event) => this.setState({ electricityValue: parseFloat(event.target.value) }, () => this.props.updateData(this.state))}\n                        variant=\"outlined\"\n                        InputProps={{\n                            endAdornment: (\n                                <InputAdornment position=\"end\">\n                                    <EuroSymbol />\n                                </InputAdornment>\n                            ),\n                        }}\n                    />\n                </div>\n            )\n        }\n\n        return (\n            <div className=\"panel\">\n                <div>\n                    <h3>Asunnon sijaintikunta</h3>\n                    <Select\n                        value={this.state.municipality}\n                        onChange={this.handleMunicipalityChange}>\n                        <MenuItem value={0}>Helsinki</MenuItem>\n                        <MenuItem value={1}>PK-seutu (pl. Helsinki)</MenuItem>\n                        <MenuItem value={2}>Muut suuret kaupungit</MenuItem>\n                        <MenuItem value={3}>Muut Suomi</MenuItem>\n                    </Select>\n                </div>\n                <div>\n                    <h3> Vuokra</h3>\n                    <TextField\n                        type=\"number\"\n                        style={{ width: 200 }}\n                        label=\"Kuussa\"\n                        value={this.state.rent}\n                        onChange={(event) => {\n\n                            this.setState({ rent: event.target.value }, () => this.props.updateData(this.state))\n                        }\n                        }\n                        variant=\"outlined\"\n                        InputProps={{\n                            endAdornment: (\n                                <InputAdornment position=\"end\">\n                                    <EuroSymbol />\n                                </InputAdornment>\n                            ),\n                        }}\n                    />\n                </div>\n                <div >\n                    <h3> Vuokraan sisältyy</h3>\n                    <div style={{ marginBottom: \"1rem\", display: \"flex\", justifyContent: \"center\" }}>\n                        <FormGroup row>\n                            <FormControlLabel\n                                control={\n                                    <Checkbox checked={this.state.includesWater} onChange={() => this.toggleIncludes('includesWater')} value=\"water\" />\n\n                                }\n                                label=\"Vesi\"\n                            />\n\n                            <FormControlLabel\n                                control={\n                                    <Checkbox checked={this.state.includesHeating} onChange={() => this.toggleIncludes('includesHeating')} value=\"heating\" />\n\n                                }\n                                label=\"Lämmitys\"\n                            />\n                            <FormControlLabel\n                                control={\n                                    <Checkbox checked={this.state.includesElectricity} onChange={() => this.toggleIncludes('includesElectricity')} value=\"electricity\" />\n\n                                }\n                                label=\"Sähkö\"\n                            />\n                        </FormGroup>\n                    </div>\n                    {area}\n                </div>\n            </div >\n        )\n\n    }\n}\n\nexport default HouseView;","import React from 'react';\nimport './App.css';\n\nfunction ResultsView(props) {\n    let message = \"Syöttämässäsi datassa on virheitä.\"\n    if (props.data.assistance > 0) {\n        message = \"Asuntokuntasi saa asumistukea \" + props.data.assistance + \" euroa kuussa.\"\n    }\n    else if (!isNaN(props.data.assistance)) {\n        message = \"Asuntokuntasi ei saa lainkaan asumistukea.\"\n    }\n    return (\n        <div>\n            {message}\n        </div>\n    );\n}\n\nexport default ResultsView;\n","import React from 'react';\nimport IncomeView from './IncomeView.js'\nimport HouseView from './HouseView.js'\nimport ResultsView from './ResultsView.js'\nimport Paper from '@material-ui/core/Paper';\nimport Grid from '@material-ui/core/Grid';\nimport './App.css';\n\n\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\nimport Button from '@material-ui/core/Button';\n\n\n\nconst incomeAllowancePerMonth = 300\nconst waterValuePerPerson = 18\n\nfunction App() {\n  const [data, setData] = React.useState({});\n  const [earnings, setEarnings] = React.useState(0);\n\n  const calcMaxResidentialCost = (municipalityGroup, residents) => {\n\n    const dataMatrix = [\n      [516, 499, 396, 349],\n      [746, 717, 579, 509],\n      [951, 903, 734, 651],\n      [1111, 1054, 869, 775]\n    ]\n    const additional_persons = [139, 132, 119, 114]\n    const basic_residents = Math.min(residents, 4)\n    const extraResidents = residents - 4\n    let cost = dataMatrix[basic_residents - 1][municipalityGroup]\n    if (extraResidents > 0) {\n      cost += additional_persons[municipalityGroup] * extraResidents\n    }\n    return cost\n  }\n  const calcAssistance = (data, earnings) => {\n    const residents = data.residentCount + data.children\n    const maxResidentialCost = calcMaxResidentialCost(data.municipality, residents)\n    let residentialCosts = Math.min(maxResidentialCost, data.rent)\n    if (data.includesElectricity) {\n      residentialCosts -= data.area * data.electricityValue\n    }\n    if (!data.includesWater) {\n      residentialCosts += waterValuePerPerson * residents\n    }\n    if (!data.includesHeating) {\n      residentialCosts += 41 + (residents - 1) * 14 // 41 euro for first person, 19 for the rest\n    }\n    const EarningsAfterEarnedIncomeAllowance = Math.max(earnings / 12 - residents * incomeAllowancePerMonth, 0)\n    const basicDeductible = Math.max(0.42 * (EarningsAfterEarnedIncomeAllowance - (597 + 99 * data.residentCount + 221 * data.children)), 0)\n    return Math.round(0.8 * (residentialCosts - basicDeductible) * 100) / 100\n  }\n\n\n  const calcTotalEarnings = (data) => {\n    let total = 0;\n    for (const row of data.initialIncomeField) {\n      total += row.amount * row.months\n    }\n    for (const resident of data.extraIncomeRows) {\n      for (const row of resident) {\n        total += row.amount * row.months\n      }\n    }\n    return total;\n  }\n  const validate = (data) => {\n    return data.children >= 0\n  }\n  const cleanData = receivedData => {\n\n    const newData = { ...data, ...receivedData }\n    const valid = validate(newData)\n    if (!valid) {\n      newData['assistance'] = NaN\n      setData(newData);\n      return\n    }\n    const earnings = calcTotalEarnings(newData)\n    setEarnings(earnings)\n    const assistance = calcAssistance(newData, earnings)\n    newData['assistance'] = isNaN(assistance) ? null : assistance\n    setData(newData);\n  };\n  return (\n    <div className=\"App\">\n      <AppBar position=\"static\">\n        <Toolbar style={{ justifyContent: \"space-between\" }}>\n          <Typography variant=\"h6\">\n            Asumistukilaskuri\n        </Typography>\n          <a href=\"mailto:kasper.nurminen@aalto.fi\">\n            <Button color=\"inherit\">Ominaisuuspyyntö</Button>\n          </a>\n        </Toolbar>\n      </AppBar>\n      <div style={{ display: \"flex\", overflow: \"scroll\", height: \"73vh\" }}>\n        <Grid container spacing={0}>\n          <Grid item xs={12} sm={6}>\n            <IncomeView updateData={cleanData} totalEarnings={earnings} />\n          </Grid>\n          <Grid item xs={12} sm={6}>\n            <HouseView updateData={cleanData} />\n          </Grid>\n        </Grid>\n      </div>\n      <div className=\"App-footer-container\">\n        <Paper\n          elevation={16}\n          className=\"App-footer\">\n          <ResultsView data={data} />\n        </Paper>\n      </div>\n    </div >\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}